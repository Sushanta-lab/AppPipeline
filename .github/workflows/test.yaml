name: build-docker-push-deploy
on: 
  #push:
  workflow_dispatch:
    inputs:
      name:
        description: provide all service to be deployed in stringified format
        required: true
        default: '"spring"'
      release_type:
        type: choice
        description: Select major,minor or patch
        options:
        - major
        - minor
        - patch
        default: patch
        
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      matrix:
        description: "App_NAME"
        value: ${{ jobs.generateInputPaths.outputs.matrix }}
      commit_id:
        description: "CommitID used as ImageTag"
        value: ${{ jobs.setup-build-publish-deploy.outputs.commit_id }}
#on:
#  push:

env:
  DOCKER_REGISTRY: gcr.io/${{ secrets.GCP_PROJECT }}
  DOCKER_UN: ${{ secrets.DOCKER_UN }}
  DOCKER_PW: ${{ secrets.DOCKER_PWD }}
  
jobs:
  #checkInputs:
  generateInputPaths:
    runs-on: ubuntu-latest
    outputs:
      check: ${{ steps.app_name.outputs.check }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Check Input app names exists
      id: app_name
      run: |
        apps="${{ github.event.inputs.name }}"
        delimiter=,
        #a=("spring" "app1" "app2" "app3" "app4" "app5" "app6" "app7" "app8" "app9" "app10" "app11" "app12" "app13" "app14" "app15" "app16" "app17" "app18" "app19" "app20")
        a=("spring" "springapp")
        b=($(echo "$apps" | tr $delimiter '\n'))
        len=${#b[@]}
        check="ok"
        for (( i=0; i<$len; i++ )); 
          do 
            if printf '%s\0' "${a[@]}" | grep -Fqxz "${b[$i]}"
            then
                #echo "check=ok" >> $GITHUB_OUTPUT
                echo "check=ok" >> $GITHUB_ENV
            elif [[ ${b[$i]} == "All" && $len == 1 ]]
            then
                echo "check=ok" >> $GITHUB_ENV
            else
                #echo "check=notok" >> $GITHUB_OUTPUT
                echo "check=notok" >> $GITHUB_ENV
                echo "${b[$i]} wrongly entered"
                break
            fi           
          done
    - name: Generate matrix with all modules of WhatTheHack repository
      id: set-matrix
      if: env.check  == 'ok'
      run: |
        apps="${{ github.event.inputs.name }}"
        echo $apps
        if [[ ${{ github.event.inputs.name }} == "All" ]]
        then 
          echo '::set-output name=matrix::["spring", "springapp"]'
        else
          echo '::set-output name=matrix::${{format('[{0}]',github.event.inputs.name)}}'
        fi
 
 
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: generateInputPaths
    runs-on: ubuntu-latest
    
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    outputs:
      commit_id: ${{ steps.git-id.outputs.commit_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Login to GCR
      - name: Login to GCR
        run: |-
          docker login $DOCKER_REGISTRY --username $DOCKER_UN --password $DOCKER_PW
      # Replace value in Dockerfile
      - name: Replace Values spring
        if:  ${{ matrix.path }} == "spring"
        working-directory: ./Dockerfiles/spring
        run: |
          sed -i -e "s|DOCKER_REGISTRY|$DOCKER_REGISTRY|g" Dockerfile
          dir=${PWD}
          echo $dir
      - name: Replace Values springapp
        if:  ${{ matrix.path }} == "springapp"
        working-directory: ./Dockerfiles/springapp
        run: |
          sed -i -e "s|DOCKER_REGISTRY|$DOCKER_REGISTRY|g" Dockerfile
      # Build Docker Image
      - name: Build
        id: git-id
        working-directory: ./Dockerfiles
        run: |-
          GIT_COMMIT_ID=$(git rev-parse --short HEAD)
          echo "commit_id=${GIT_COMMIT_ID}" >> $GITHUB_OUTPUT
          echo "commit_id=${GIT_COMMIT_ID}" >> $GITHUB_ENV
          
          docker build -t $DOCKER_REGISTRY/${{ matrix.path }}:$GIT_COMMIT_ID --file ./${{ matrix.path }}/Dockerfile .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          IMG_VERSION=${commit_id}
          docker push $DOCKER_REGISTRY/${{ matrix.path }}:$IMG_VERSION
               
  deploy-app-on-GKE-DEV:
    name: Deploy on Dev
    needs: ['generateInputPaths', 'setup-build-publish-deploy']
    #environment: dev
    runs-on: ubuntu-latest
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install GCP Dependencies
      - name: cloud-sdk-setup
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_CRED }}
          export_default_credentials: true
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'test'
          location: 'us-central1-c'
      # Get current version of App 
      - name: Get current Helm Chart version(DEV)
        run: |-
          APP_NAME=${{ matrix.path }}
          echo "PREV_CHART_VERSION=$(helm ls -n dev | awk '{print $1,$10}' | grep $APP_NAME | awk '{print $2}')" >> $GITHUB_ENV
          echo "---------${PREV_CHART_VERSION}----------"
      # Get new version of App 
      - name: New Helm Chart version(DEV)
        run: |-
          echo ${PREV_CHART_VERSION}
          if [[ $PREV_CHART_VERSION != "" ]]
          then
            release="${{ github.event.inputs.release_type }}"
            echo "---------INSIDE 1ST IF----------"
            echo "$release"
            if [[ $release == "major" ]]
            then
              rel="0"
            fi
            if [[ "$release" == "minor" ]]
            then
              rel="1"
            fi
            if [[ $release == "patch" ]]
            then
              rel="2"
            fi
            delimiter=.
            array=($(echo "$PREV_CHART_VERSION" | tr $delimiter '\n'))
            array[rel]=$((array[rel]+1))
            if [ $rel -lt 2 ]; then array[2]=0; fi
            if [ $rel -lt 1 ]; then array[1]=0; fi
            echo "NEW_VERSION=$( IFS=$delimiter ; echo "${array[*]}")" >> $GITHUB_ENV
          else
            echo "NEW_VERSION=1.0.0" >> $GITHUB_ENV
            echo "---------INSIDE else----------"
          fi
          echo "${NEW_VERSION}"
      # Configure runner with GKE
      - name: Prepare Helm Chart for DEV
        run: |-
          
      # Install chart in DEV Env
      - name: upgrade chart spring
        run: |
          #version_file="deployment_version.yaml"
          #APP_VERSION=$(yq -r .${{ matrix.path }}_dev.version ${version_file})
          echo "${NEW_VERSION}"
          IMG_VERSION=${{ needs.setup-build-publish-deploy.outputs.commit_id }}
          cd charts/${{ matrix.path }}
          sed -i -e "s|tag: VERSION|tag: $IMG_VERSION|g" values-dev.yaml
          sed -i -e "s|NAMES|spring|g" Chart.yaml
          sed -i -e "s|appVersion: .*|appVersion: $NEW_VERSION|g" Chart.yaml
          sed -i -e "s|version: .*|version: $NEW_VERSION|g" Chart.yaml
          cat Chart.yaml
          #sed -i -e "s|APP_VERSION|$APP_VERSION|g" Chart.yaml
          #sed -i -e "s|CHART_VERSION|$APP_VERSION|g" Chart.yaml
          sed -i -e "s|repository: IMAGE_NAME|repository: $DOCKER_REGISTRY/spring|g" values-dev.yaml
          helm upgrade -i spring -f ./values-dev.yaml . --namespace dev
          echo "deploy on dev $APP_VERSION"
       

  deploy-app-on-GKE-UAT:
    name: Deploy on UAT
    needs: ['generateInputPaths', 'setup-build-publish-deploy', 'deploy-app-on-GKE-DEV']
    environment: uat
    runs-on: ubuntu-latest
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install GCP Dependencies
      - name: cloud-sdk-setup
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_CRED }}
          export_default_credentials: true
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'test-uat'
          location: 'us-central1-c'
      # Configure runner with GKE
      # Install chart in UAT Env
      - name: upgrade chart spring
        run: |
          version_file="deployment_version.yaml"
          APP_VERSION=$(yq -r .${{ matrix.path }}_uat.version ${version_file})
          IMG_VERSION=${{ needs.setup-build-publish-deploy.outputs.commit_id }}
          cd charts/${{ matrix.path }}
          sed -i -e "s|tag: VERSION|tag: $IMG_VERSION|g" values-uat.yaml
          sed -i -e "s|NAMES|spring|g" Chart.yaml
          sed -i -e "s|APP_VERSION|$APP_VERSION|g" Chart.yaml
          sed -i -e "s|CHART_VERSION|$APP_VERSION|g" Chart.yaml
          sed -i -e "s|repository: IMAGE_NAME|repository: $DOCKER_REGISTRY/spring|g" values-uat.yaml
          cat Chart.yaml
          helm upgrade -i spring -f ./values-uat.yaml . --namespace uat
          echo "deploy on uat $APP_VERSION"
